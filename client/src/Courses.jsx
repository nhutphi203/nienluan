import { useState, useEffect, useRef } from "react";
import StudentClasses from "./student";
import TeacherClasses from "./teacher";
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { toast } from "react-toastify";
import "react-toastify/dist/ReactToastify.css";
import io from "socket.io-client";
import "./Documents.css";

const socket = io("http://localhost:5000", { transports: ["websocket"] });

const Courses = ({ user }) => {
    const [selectedClass, setSelectedClass] = useState(null);
    const [announcements, setAnnouncements] = useState([]);
    const [assignments, setAssignments] = useState([]);
    const [submittedAssignments, setSubmittedAssignments] = useState([]);
    const [students, setStudents] = useState([]);
    const [notifications, setNotifications] = useState([]);
    const navigate = useNavigate();
    const [documents, setDocuments] = useState([]);

    const [newAnnouncement, setNewAnnouncement] = useState("");
    const [selectedFile, setSelectedFile] = useState(null);
    const fileInputRef = useRef(null);
    const storedUser = localStorage.getItem("user");
    const [currentUser, setCurrentUser] = useState(user || (storedUser ? JSON.parse(storedUser) : null));

    useEffect(() => {
        if (!currentUser) {
            navigate("/login");
        } else {
            fetchNotifications(currentUser.role);
        }
    }, [currentUser, navigate]);
    useEffect(() => {
        if (selectedClass) {
            fetchNotifications(selectedClass);
        }
    }, [selectedClass]);
    useEffect(() => {
        console.log("üì¢ Th√¥ng b√°o m·ªõi c·∫≠p nh·∫≠t:", announcements);
    }, [announcements]);
    useEffect(() => {
        socket.on("newNotification", (notification) => {
            console.log("üîî Nh·∫≠n th√¥ng b√°o m·ªõi t·ª´ server:", notification);
            setAnnouncements((prev) => [notification, ...prev]);
        });

        return () => socket.off("newNotification");
    }, []);
    useEffect(() => {
        const socket = io("http://localhost:5000");

        socket.on("newNotification", (notification) => {
            console.log("üîî Nh·∫≠n th√¥ng b√°o m·ªõi t·ª´ server:", notification);
            setAnnouncements((prev) => [notification, ...prev]);
        });

        return () => {
            socket.disconnect();
        };
    }, []);

    const fetchNotifications = async (selectedClass) => {
        try {
            const res = await axios.get(`http://localhost:5000/notifications/notifications?class_id=${selectedClass}`);
            console.log("üì¢ D·ªØ li·ªáu th√¥ng b√°o nh·∫≠n ƒë∆∞·ª£c t·ª´ API:", res.data); // Ki·ªÉm tra d·ªØ li·ªáu
            setAnnouncements(res.data);
            console.log("üîî State th√¥ng b√°o sau khi c·∫≠p nh·∫≠t:", res.data); // In ra d·ªØ li·ªáu m·ªõi thay v√¨ announcements
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y th√¥ng b√°o:", error);
            toast.error("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i th√¥ng b√°o!");
        }
    };


    const [newTitle, setNewTitle] = useState(""); // üîπ Th√™m state cho ti√™u ƒë·ªÅ
    const handleAddAnnouncement = async () => {
        if (!newAnnouncement.trim()) {
            toast.error("‚ö†Ô∏è N·ªôi dung th√¥ng b√°o kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
            return;
        }

        try {
            let data;
            if (selectedFile) {
                data = new FormData();
                data.append("class_id", selectedClass);
                data.append("teacher_id", currentUser.id);
                data.append("title", newTitle); // üÜï Gi√°o vi√™n nh·∫≠p title
                data.append("message", newAnnouncement);
                data.append("file", selectedFile);
            } else {
                data = {
                    class_id: selectedClass,
                    teacher_id: currentUser.id,
                    title: newTitle, // üÜï Gi√°o vi√™n nh·∫≠p title
                    message: newAnnouncement,
                };
            }

            const response = await axios.post("http://localhost:5000/notifications/notifications", data, {
                headers: selectedFile ? { "Content-Type": "multipart/form-data" } : { "Content-Type": "application/json" },
            });

            if (response.status === 201) {
                toast.success("‚úÖ Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c ƒëƒÉng!");
            } else {
                toast.warn("‚ö†Ô∏è G·ª≠i th√¥ng b√°o kh√¥ng th√†nh c√¥ng, vui l√≤ng th·ª≠ l·∫°i!");
            }

            setNewAnnouncement("");
            setSelectedFile(null);
            setNewTitle(""); // Reset title
            setSelectedFile("");
            fetchNotifications("class_" + selectedClass);
        } catch (error) {
            console.error("‚ùå L·ªói khi g·ª≠i th√¥ng b√°o:", error);
            toast.error("‚ö†Ô∏è Kh√¥ng th·ªÉ ƒëƒÉng th√¥ng b√°o!");
        }
    };


    const handleSelectClass = async (class_Id) => {
        console.log("Ch·ªçn l·ªõp:", class_Id); // Debug: ki·ªÉm tra d·ªØ li·ªáu
        try {
            const response = await axios.get(`http://localhost:5000/documents/class/${class_Id}`);
            console.log("D·ªØ li·ªáu t√†i li·ªáu:", response.data); // Debug: ki·ªÉm tra d·ªØ li·ªáu tr·∫£ v·ªÅ
            setDocuments(response.data);
            setSelectedClass(class_Id);
        } catch (error) {
            console.error("‚ùå L·ªói khi l·∫•y t√†i li·ªáu:", error);
            toast.error("‚ö†Ô∏è Kh√¥ng th·ªÉ t·∫£i t√†i li·ªáu!");
        }
    };



    const handleDeleteAnnouncement = async (id) => {
        if (!window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a th√¥ng b√°o n√†y kh√¥ng?")) return;

        try {
            const response = await axios.delete(`http://localhost:5000/notifications/notifications/${id}`);
            if (response.status === 200) {
                toast.success("üóëÔ∏è ƒê√£ x√≥a th√¥ng b√°o v√† t√†i li·ªáu!");
                // G·ª≠i th√¥ng b√°o m·ªõi qua socket.io
                socket.emit("newNotification", response.data);

                // C·∫≠p nh·∫≠t state ngay l·∫≠p t·ª©c m√† kh√¥ng c·∫ßn g·ªçi API
                setAnnouncements((prev) => [response.data, ...prev]);
                // G·ªçi l·∫°i API ƒë·ªÉ l·∫•y danh s√°ch th√¥ng b√°o m·ªõi nh·∫•t
                fetchNotifications(selectedClass);
            } else {
                toast.error("‚ùå X√≥a kh√¥ng th√†nh c√¥ng!");
            }
        } catch (error) {
            console.error("L·ªói khi x√≥a th√¥ng b√°o:", error);
            toast.error("‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a th√¥ng b√°o!");
        }
    };



    return (
        <div className="courses-container">


            {!selectedClass ? (
                <>
                    <h3>Ch·ªçn l·ªõp h·ªçc</h3>
                    {currentUser?.role === "hv" ? (
                        <StudentClasses userId={currentUser.id} onSelectClass={handleSelectClass} />
                    ) : currentUser?.role === "gv" ? (
                        <TeacherClasses userId={currentUser.id} onSelectClass={handleSelectClass} />
                    ) : null}
                </>
            ) : (
                <div>
                    <h2>üì¢ Danh s√°ch th√¥ng b√°o</h2>
                    {announcements.length === 0 ? (
                        <p>üì≠ Ch∆∞a c√≥ th√¥ng b√°o n√†o!</p>
                    ) : (
                        <ul>
                            {announcements.length > 0 ? (
                                announcements.map((notif) => (
                                    <li key={notif.id} className="notification-item">
                                        <p className="font-medium">{notif?.title}</p>
                                        <p className="text-sm text-gray-600">{notif?.message}</p>

                                        {documents.length > 0 ? (
                                            documents.map((doc) => (
                                                <li key={doc.id}>
                                                    <a
                                                        href={`http://localhost:5000${doc.file_path}`}
                                                        target="_blank"
                                                        rel="noopener noreferrer"
                                                    >
                                                        {doc.title}
                                                    </a>

                                                </li>
                                            ))
                                        ) : (
                                            <p>Kh√¥ng c√≥ t√†i li·ªáu n√†o.</p>
                                        )}

                                        {/* N·∫øu l√† gi√°o vi√™n, hi·ªÉn th·ªã n√∫t x√≥a */}
                                        {currentUser?.role === "gv" && (
                                            <button
                                                onClick={() => handleDeleteAnnouncement(notif.id)}
                                                className="delete-btn"
                                            >
                                                ‚ùå X√≥a
                                            </button>
                                        )}
                                    </li>
                                ))
                            ) : (
                                <li className="text-center text-gray-500">Kh√¥ng c√≥ th√¥ng b√°o</li>
                            )}
                        </ul>

                    )}
                </div>
            )}

            {/* Form t·∫°o th√¥ng b√°o: ƒë·∫∑t ngo√†i kh·ªëi tr√™n ƒë·ªÉ lu√¥n hi·ªÉn th·ªã n·∫øu l√† gi√°o vi√™n v√† ƒë√£ ch·ªçn l·ªõp */}
            {currentUser?.role === "gv" && selectedClass && (
                <div className="add-announcement">
                    <h3>üì¢ Th√™m Th√¥ng B√°o</h3>
                    <input
                        type="text"
                        placeholder="Nh·∫≠p ti√™u ƒë·ªÅ th√¥ng b√°o..."
                        value={newTitle}
                        onChange={(e) => setNewTitle(e.target.value)}
                        className="border p-2 w-full rounded"
                    />

                    <textarea
                        placeholder="Nh·∫≠p n·ªôi dung th√¥ng b√°o..."
                        value={newAnnouncement}
                        onChange={(e) => setNewAnnouncement(e.target.value)}
                    />
                    <input
                        type="file"
                        ref={fileInputRef}
                        onChange={(e) => setSelectedFile(e.target.files[0])}
                    />
                    <button onClick={handleAddAnnouncement}>üì© G·ª≠i th√¥ng b√°o</button>
                </div>
            )}


        </div>
    );
};

export default Courses;
