import { useEffect, useState } from "react";

const TeacherClassRegister = () => {
    const [classes, setClasses] = useState([]);
    const [assignedClasses, setAssignedClasses] = useState([]); // Danh s√°ch l·ªõp ƒë√£ ƒë∆∞·ª£c gi√°o vi√™n ƒëƒÉng k√Ω
    const teacherId = JSON.parse(localStorage.getItem("user"))?.id; // L·∫•y ID gi√°o vi√™n t·ª´ localStorage
    const [loadingAssigned, setLoadingAssigned] = useState(true);
    useEffect(() => {
        // T·∫£i danh s√°ch l·ªõp ch∆∞a c√≥ gi√°o vi√™n
        fetch("http://localhost:5000/teacher/classes/unassigned")
            .then(async (res) => {
                const data = await res.json();
                if (!res.ok) {
                    // N·∫øu c√≥ l·ªói t·ª´ backend, th√¥ng b√°o v√† tr·∫£ v·ªÅ
                    alert(`‚ùå L·ªói khi t·∫£i danh s√°ch l·ªõp: ${data.error || "Kh√¥ng x√°c ƒë·ªãnh"}`);
                    return;
                }
                setClasses(data);
            })
            .catch((error) => console.error("‚ùå L·ªói khi t·∫£i danh s√°ch l·ªõp:", error));

        // T·∫£i danh s√°ch l·ªõp ƒë√£ ƒëƒÉng k√Ω c·ªßa gi√°o vi√™n
        fetch(`http://localhost:5000/teacher/classes/assigned/${teacherId}`)
            .then(async (res) => {
                const data = await res.json();
                if (!res.ok) {
                    // N·∫øu c√≥ l·ªói t·ª´ backend, th√¥ng b√°o v√† tr·∫£ v·ªÅ
                    alert(`‚ùå L·ªói khi t·∫£i l·ªõp ƒë√£ ƒëƒÉng k√Ω: ${data.error || "Kh√¥ng x√°c ƒë·ªãnh"}`);
                    setLoadingAssigned(false);
                    return;
                }
                console.log("üì¶ D·ªØ li·ªáu t·ª´ backend:", data);
                setAssignedClasses(data);
                setLoadingAssigned(false); // ‚úÖ ƒê√£ load xong
            })
            .catch((error) => {
                console.error("‚ùå L·ªói khi t·∫£i danh s√°ch l·ªõp ƒë√£ ƒëƒÉng k√Ω:", error);
                setLoadingAssigned(false); // K·ªÉ c·∫£ l·ªói v·∫´n k·∫øt th√∫c
            });
    }, [teacherId]);



    // H√†m chu·∫©n h√≥a l·ªãch h·ªçc th√†nh d·∫°ng m·∫£ng ng√†y/th·ªùi gian ƒë·ªÉ so s√°nh
    const normalizeSchedule = (schedule) => {
        if (!schedule) return [];
        // Gi·∫£ s·ª≠ l·ªãch h·ªçc c√≥ ƒë·ªãnh d·∫°ng nh∆∞: "monday (17:20:00 - 19:00:00)", "wednesday (17:20:00 - 19:00:00)"
        return schedule.split("\n").map(item => {
            const match = item.match(/([a-zA-Z]+)\s\(([\d:]+)\s-\s([\d:]+)\)/);
            if (match) {
                return { day: match[1], start: match[2], end: match[3] };
            }
            return null;
        }).filter(Boolean);
    };
    // Chuy·ªÉn gi·ªù d·∫°ng chu·ªói th√†nh s·ªë ph√∫t ƒë·ªÉ d·ªÖ so s√°nh
    const toMinutes = (timeStr) => {
        const [h, m] = timeStr.split(":").map(Number);
        return h * 60 + m;
    };

    // Ki·ªÉm tra hai kho·∫£ng th·ªùi gian c√≥ giao nhau kh√¥ng
    const isTimeOverlap = (startA, endA, startB, endB) => {
        const sA = toMinutes(startA);
        const eA = toMinutes(endA);
        const sB = toMinutes(startB);
        const eB = toMinutes(endB);
        return sA < eB && sB < eA;
    };

    const isScheduleConflict = (newSchedule) => {
        const newScheduleNormalized = normalizeSchedule(newSchedule);

        return assignedClasses.some((assignedClass) => {
            const assignedScheduleNormalized = normalizeSchedule(assignedClass.schedule);

            return newScheduleNormalized.some(newItem =>
                assignedScheduleNormalized.some(assignedItem =>
                    newItem.day.toLowerCase() === assignedItem.day.toLowerCase() &&
                    isTimeOverlap(newItem.start, newItem.end, assignedItem.start, assignedItem.end)
                )
            );
        });
    };
    const handleRegisterClass = (classId, className, classSchedule) => {
        if (loadingAssigned) {
            alert("‚è≥ ƒêang t·∫£i danh s√°ch l·ªõp ƒë√£ ƒëƒÉng k√Ω, vui l√≤ng ƒë·ª£i...");
            return;
        }

        // Ki·ªÉm tra n·∫øu l·ªãch l·ªõp m·ªõi tr√πng v·ªõi l·ªãch l·ªõp ƒë√£ ƒëƒÉng k√Ω
        if (isScheduleConflict(classSchedule)) {
            alert(`‚ùå L·ªãch d·∫°y l·ªõp ${className} tr√πng v·ªõi l·ªõp ƒë√£ ƒëƒÉng k√Ω tr∆∞·ªõc ƒë√≥.`);
            return; // Kh√¥ng ti·∫øp t·ª•c ƒëƒÉng k√Ω n·∫øu tr√πng l·ªãch
        }

        // G·ª≠i y√™u c·∫ßu ƒëƒÉng k√Ω l·ªõp
        fetch(`http://localhost:5000/teacher/classes/${classId}/assign-teacher`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ teacher_id: teacherId }),
        })
            .then((res) => res.json())
            .then((data) => {
                console.log('D·ªØ li·ªáu ph·∫£n h·ªìi t·ª´ server:', data); // In ra ƒë·ªÉ ki·ªÉm tra

                // Ki·ªÉm tra th√¥ng b√°o t·ª´ server
                if (!data.message || !data.message.includes("G√°n gi√°o vi√™n th√†nh c√¥ng")) {
                    alert(`‚ùå L·ªõp ${className} tr√πng l·ªãch!`);
                    return; // N·∫øu kh√¥ng c√≥ th√¥ng b√°o th√†nh c√¥ng, th√¨ ƒëƒÉng k√Ω th·∫•t b·∫°i
                }

                // ƒêƒÉng k√Ω th√†nh c√¥ng, th√¥ng b√°o cho ng∆∞·ªùi d√πng
                alert(`‚úÖ B·∫°n ƒë√£ ƒëƒÉng k√Ω d·∫°y l·ªõp ${className} th√†nh c√¥ng!`);

                // C·∫≠p nh·∫≠t l·∫°i danh s√°ch l·ªõp ch∆∞a c√≥ gi√°o vi√™n (x√≥a l·ªõp ƒë√£ ƒëƒÉng k√Ω)
                setClasses(classes.filter((cls) => cls.id !== classId));

                // C·∫≠p nh·∫≠t l·∫°i danh s√°ch l·ªõp ƒë√£ ƒëƒÉng k√Ω c·ªßa gi√°o vi√™n
                fetch(`http://localhost:5000/teacher/classes/assigned/${teacherId}`)
                    .then((res) => res.json())
                    .then((assignedData) => {
                        if (assignedData && Array.isArray(assignedData)) {
                            setAssignedClasses(assignedData);
                        } else {
                            console.error("L·ªói khi l·∫•y danh s√°ch l·ªõp ƒë√£ ƒëƒÉng k√Ω.");
                        }
                    })
                    .catch((error) => console.error("‚ùå L·ªói khi t·∫£i l·∫°i danh s√°ch l·ªõp ƒë√£ ƒëƒÉng k√Ω:", error));
            })
            .catch((error) => {
                console.error("‚ùå L·ªói khi ƒëƒÉng k√Ω l·ªõp:", error);
            });


    };



    return (
        <div>
            <h2>Danh s√°ch l·ªõp ch∆∞a c√≥ gi√°o vi√™n</h2>
            <table border="1" cellPadding="8" cellSpacing="0">
                <thead>
                    <tr>
                        <th>T√™n l·ªõp</th>
                        <th>Tr√¨nh ƒë·ªô</th>
                        <th>Kh·ªëi</th>
                        <th>Sƒ© s·ªë</th>
                        <th>L·ªãch h·ªçc</th>
                        <th>H√†nh ƒë·ªông</th>
                    </tr>
                </thead>
                <tbody>
                    {classes.length > 0 ? (
                        classes.map((cls) => (
                            <tr key={cls.id}>
                                <td>{cls.name}</td>
                                <td>{cls.type_mapped}</td>
                                <td>{cls.grade}</td>
                                <td>{cls.current_student}/{cls.max_student}</td>
                                <td>{cls.schedule || "Ch∆∞a c√≥ l·ªãch"}</td>
                                <td>
                                    <button
                                        onClick={() => handleRegisterClass(cls.id, cls.name, cls.schedule)}>
                                        ƒêƒÉng k√Ω d·∫°y
                                    </button>
                                </td>
                            </tr>
                        ))
                    ) : (
                        <tr>
                            <td colSpan="6" style={{ textAlign: "center" }}>Kh√¥ng c√≥ l·ªõp n√†o c·∫ßn gi√°o vi√™n.</td>
                        </tr>
                    )}
                </tbody>
            </table>
        </div>
    );
};

export default TeacherClassRegister;
