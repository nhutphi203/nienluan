import { useEffect, useState } from "react";
import "./ManageTeachers.css";

const ManageTeachers = () => {
    const [teachers, setTeachers] = useState([]);
    const [fullName, setFullName] = useState("");
    const [username, setUsername] = useState("");
    const [email, setEmail] = useState("");
    const [phone, setPhone] = useState("");
    const [password, setPassword] = useState("");
    const [message, setMessage] = useState("");
    const [error, setError] = useState("");

    useEffect(() => {
        fetchTeachers();
    }, []);

    const fetchTeachers = () => {
        fetch("http://localhost:5000/manager/teachers")
            .then((response) => response.json())
            .then((data) => setTeachers(data))
            .catch((error) => console.error("L·ªói khi l·∫•y gi√°o vi√™n:", error));
    };

    const handleAddTeacher = async (e) => {
        e.preventDefault();
        setMessage("");
        setError("");

        const newTeacher = { fullName, username, email, phone, password };

        try {
            const response = await fetch("http://localhost:5000/manager/teachers", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(newTeacher),
            });

            const data = await response.json();
            if (response.ok) {
                setMessage("‚úÖ Th√™m gi√°o vi√™n th√†nh c√¥ng!");
                fetchTeachers();
                setFullName(""); setUsername(""); setEmail(""); setPhone(""); setPassword("");
                alert("‚úÖ Th√™m gi√°o vi√™n th√†nh c√¥ng!");
            } else {
                setError(data.error || "L·ªói kh√¥ng x√°c ƒë·ªãnh!");
                alert("‚ùå L·ªói: " + (data.error || "Kh√¥ng x√°c ƒë·ªãnh!"));
            }
        } catch (error) {
            console.error("‚ùå L·ªói khi th√™m gi√°o vi√™n:", error);
            setError("‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn server!");
            alert("‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn server!");
        }
    };

    // üõë H√†m x√≥a gi√°o vi√™n
    const handleDeleteTeacher = async (id) => {
        const confirmDelete = window.confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a gi√°o vi√™n n√†y?");
        if (!confirmDelete) return;

        try {
            const response = await fetch(`http://localhost:5000/manager/teachers/${id}`, {
                method: "DELETE",
            });

            if (response.ok) {
                alert("‚úÖ X√≥a gi√°o vi√™n th√†nh c√¥ng!");
                fetchTeachers(); // C·∫≠p nh·∫≠t danh s√°ch sau khi x√≥a
            } else {
                alert("‚ùå L·ªói khi x√≥a gi√°o vi√™n!");
            }
        } catch (error) {
            console.error("‚ùå L·ªói khi x√≥a gi√°o vi√™n:", error);
            alert("‚ùå L·ªói k·∫øt n·ªëi ƒë·∫øn server!");
        }
    };

    return (
        <div>
            <h2>Qu·∫£n l√Ω gi√°o vi√™n</h2>

            {/* Hi·ªÉn th·ªã th√¥ng b√°o */}
            {message && <p style={{ color: "green" }}>{message}</p>}
            {error && <p style={{ color: "red" }}>{error}</p>}

            <form onSubmit={handleAddTeacher}>
                <input
                    type="text"
                    placeholder="H·ªç v√† t√™n"
                    value={fullName}
                    onChange={(e) => setFullName(e.target.value)}
                    required
                />
                <input
                    type="text"
                    placeholder="T√™n ƒëƒÉng nh·∫≠p"
                    value={username}
                    onChange={(e) => setUsername(e.target.value)}
                    required
                />
                <input
                    type="email"
                    placeholder="Email"
                    value={email}
                    onChange={(e) => setEmail(e.target.value)}
                    required
                />
                <input
                    type="text"
                    placeholder="S·ªë ƒëi·ªán tho·∫°i"
                    value={phone}
                    onChange={(e) => setPhone(e.target.value)}
                    required
                />
                <input
                    type="password"
                    placeholder="M·∫≠t kh·∫©u"
                    value={password}
                    onChange={(e) => setPassword(e.target.value)}
                    required
                />
                <button type="submit">Th√™m gi√°o vi√™n</button>
            </form>

            <table border="1">
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>H·ªç v√† t√™n</th>
                        <th>T√™n ƒëƒÉng nh·∫≠p</th>
                        <th>Email</th>
                        <th>S·ªë ƒëi·ªán tho·∫°i</th>
                        <th>Ng√†y t·∫°o</th>
                        <th>H√†nh ƒë·ªông</th> {/* C·ªôt X√≥a */}
                    </tr>
                </thead>
                <tbody>
                    {teachers.map((teacher) => (
                        <tr key={teacher.id}>
                            <td>{teacher.id}</td>
                            <td>{teacher.fullName}</td>
                            <td>{teacher.username}</td>
                            <td>{teacher.email}</td>
                            <td>{teacher.phone}</td>
                            <td>{new Date(teacher.created_at).toLocaleDateString()}</td>
                            <td>
                                <button onClick={() => handleDeleteTeacher(teacher.id)} style={{ color: "red" }}>
                                    ‚ùå X√≥a
                                </button>
                            </td>
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
};

export default ManageTeachers;
