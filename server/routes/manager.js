import express from "express";
import mysql from "mysql2/promise";
import bcrypt from "bcryptjs"; // C·∫ßn import bcryptjs
const router = express.Router();
const db = mysql.createPool({
    host: process.env.DB_HOST || "127.0.0.1",
    user: process.env.DB_USER || "root",
    password: process.env.DB_PASS || "11111111",
    database: process.env.DB_NAME || "tutoring_center",
    port: process.env.DB_PORT || 3306,
    waitForConnections: true,
    connectionLimit: 10,
    queueLimit: 0
});


// API l·∫•y danh s√°ch nh√≥m h·ªçc
router.get("/groups", async (req, res) => {
    try {
        const [groups] = await db.execute("SELECT * FROM `groups`");
        res.json(groups);
    } catch (error) {
        res.status(500).json({ error: "L·ªói l·∫•y danh s√°ch nh√≥m h·ªçc", details: error.message });
    }
});

router.post("/groups", async (req, res) => {
    try {
        const { group_name, grade_level, level, schedule } = req.body;

        console.log("üì• D·ªØ li·ªáu nh·∫≠n t·ª´ frontend:", req.body);

        if (!group_name || !grade_level || !level || !schedule) {
            return res.status(400).json({ error: "Thi·∫øu th√¥ng tin nh√≥m h·ªçc" });
        }

        const sql = `
            INSERT INTO \`groups\` (group_name, grade_level, level, schedule) 
            VALUES (?, ?, ?, ?)
        `;
        const values = [group_name, grade_level, level, schedule];

        const [result] = await db.execute(sql, values);

        console.log("‚úÖ Nh√≥m h·ªçc ƒë∆∞·ª£c th√™m:", result);
        res.status(201).json({ message: "Th√™m nh√≥m h·ªçc th√†nh c√¥ng", id: result.insertId });
    } catch (error) {
        console.error("‚ùå L·ªñI khi th√™m nh√≥m h·ªçc:", error);
        res.status(500).json({ error: "L·ªói server khi th√™m nh√≥m h·ªçc" });
    }
});



router.delete("/groups/:id", async (req, res) => {
    const { id } = req.params;

    try {
        console.log(`üóëÔ∏è ƒêang x√≥a nh√≥m v·ªõi ID: ${id}`);

        const [rows] = await db.execute("SELECT * FROM `groups` WHERE id = ?", [id]);

        if (rows.length === 0) {
            return res.status(404).json({ error: "Nh√≥m h·ªçc kh√¥ng t·ªìn t·∫°i" });
        }

        await db.execute("DELETE FROM `groups` WHERE id = ?", [id]);

        console.log("‚úîÔ∏è Nh√≥m h·ªçc ƒë√£ ƒë∆∞·ª£c x√≥a!");
        res.json({ message: "Nh√≥m h·ªçc ƒë√£ ƒë∆∞·ª£c x√≥a" });

    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a nh√≥m h·ªçc:", error);
        res.status(500).json({ error: "L·ªói khi x√≥a nh√≥m h·ªçc", details: error.message });
    }
});

// API b√°o c√°o t√†i ch√≠nh
router.get("/finance", async (req, res) => {
    try {
        const [totalFeesResult] = await db.execute("SELECT SUM(already_pay) AS totalFees FROM student_pay_fee");
        const totalFees = totalFeesResult[0].totalFees || 0;

        const [totalSalaryResult] = await db.execute("SELECT SUM(salary) AS totalSalary FROM salary");
        const totalSalary = totalSalaryResult[0].totalSalary || 0;

        const profit = totalFees - totalSalary;
        res.json({ totalFees, totalSalary, profit });
    } catch (error) {
        res.status(500).json({ error: "L·ªói khi l·∫•y b√°o c√°o t√†i ch√≠nh", details: error.message });
    }
});

router.get("/teachers", async (req, res) => {
    try {
        const [rows] = await db.execute(`
            SELECT id, username, email, created_at, fullName,phone
            FROM users 
            WHERE role = 'gv'
        `);
        res.json(rows);
    } catch (error) {
        res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch gi√°o vi√™n" });
    }
});
router.post("/teachers", async (req, res) => {
    const { fullName, username, email, phone, password } = req.body;

    if (!fullName || !username || !email || !phone || !password) {
        return res.status(400).json({ error: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin" });
    }

    try {
        const checkQuery = "SELECT * FROM users WHERE username = ? OR email = ?";
        const [results] = await db.execute(checkQuery, [username, email]);

        if (results.length > 0) {
            return res.status(400).json({ error: "T√™n ƒëƒÉng nh·∫≠p ho·∫∑c email ƒë√£ t·ªìn t·∫°i!" });
        }

        const hashedPassword = await bcrypt.hash(password, 10);

        const insertQuery = `
            INSERT INTO users (fullName, username, phone, email, password, role, created_at)
            VALUES (?, ?, ?, ?, ?, 'gv', NOW())`;

        const [result] = await db.execute(insertQuery, [fullName, username, phone, email, hashedPassword]);

        res.status(201).json({ message: "Th√™m gi√°o vi√™n th√†nh c√¥ng!", teacherId: result.insertId });
    } catch (error) {
        console.error("‚ùå L·ªói server:", error);
        res.status(500).json({ error: "L·ªói server" });
    }
});
router.delete("/teachers/:id", async (req, res) => {
    const teacherId = req.params.id;

    try {
        const [result] = await db.execute("DELETE FROM users WHERE id = ? AND role = 'gv'", [teacherId]);

        if (result.affectedRows > 0) {
            res.json({ message: "‚úÖ Gi√°o vi√™n ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!" });
        } else {
            res.status(404).json({ error: "‚ùå Kh√¥ng t√¨m th·∫•y gi√°o vi√™n ho·∫∑c gi√°o vi√™n kh√¥ng t·ªìn t·∫°i!" });
        }
    } catch (error) {
        console.error("‚ùå L·ªói khi x√≥a gi√°o vi√™n:", error);
        res.status(500).json({ error: "‚ùå L·ªói m√°y ch·ªß khi x√≥a gi√°o vi√™n!" });
    }
});

router.get("/schedules", async (req, res) => {
    try {
        const [rows] = await db.execute(`
            SELECT s.id, c.class_name, t.username AS teacher_name, p.start_time, p.end_time, s.day_of_week 
            FROM schedule s
            JOIN class c ON s.class_id = c.id
            JOIN users t ON s.teacher_id = t.id AND t.role = 'gv'
            JOIN period_time p ON s.period_id = p.id
        `);
        res.json(rows);
    } catch (error) {
        res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch th·ªùi kh√≥a bi·ªÉu" });
    }
});


router.get("/students", async (req, res) => {
    try {
        const [rows] = await db.execute(`
            SELECT id, username, email, created_at 
            FROM users 
            WHERE role = 'hv'
        `);
        res.json(rows);
    } catch (error) {
        res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch h·ªçc vi√™n" });
    }
});

router.get("/revenue", async (req, res) => {
    try {
        const [rows] = await db.query(`
            SELECT DATE(latest_pay_at) as date, SUM(already_pay) as revenue
            FROM student_pay_fee
            WHERE MONTH(latest_pay_at) = MONTH(CURRENT_DATE()) 
              AND YEAR(latest_pay_at) = YEAR(CURRENT_DATE())
            GROUP BY DATE(latest_pay_at)
        `);
        res.json(rows);
    } catch (err) {
        res.status(500).json({ error: err.message });
    }
});


// ƒê√≥ng k·∫øt n·ªëi MySQL khi server d·ª´ng
process.on("exit", async () => {
    console.log("‚ö†Ô∏è ƒê√≥ng k·∫øt n·ªëi MySQL...");
    await db.end();
});

export default router;
