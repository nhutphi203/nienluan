import express from "express";
import mysql from "mysql";

const router = express.Router();

// K·∫øt n·ªëi database
const db = mysql.createConnection({
    host: process.env.DB_HOST || "127.0.0.1",
    user: process.env.DB_USER || "root",
    password: process.env.DB_PASS || "11111111",
    database: process.env.DB_NAME || "tutoring_center",
    port: process.env.DB_PORT || 3306
});
// ƒê·ªïi ƒë∆∞·ªùng d·∫´n API th√†nh /manager/classes
router.get("/manager/classes", async (req, res) => {
    try {
        const [classes] = await db.query("SELECT * FROM class");
        res.json(classes);
    } catch (err) {
        res.status(500).json({ error: "L·ªói l·∫•y danh s√°ch l·ªõp!" });
    }
});
router.delete("/unregister-class/:teacher_id/:class_id", (req, res) => {
    const { teacher_id, class_id } = req.params;

    const sql = "UPDATE class SET teacher_id = NULL WHERE id = ? AND teacher_id = ?";

    db.query(sql, [class_id, teacher_id], (err, result) => {
        if (err) {
            console.error("‚ùå L·ªói khi h·ªßy ƒëƒÉng k√Ω d·∫°y:", err);
            return res.status(500).json({ error: "L·ªói khi h·ªßy ƒëƒÉng k√Ω d·∫°y!" });
        }
        if (result.affectedRows === 0) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y l·ªõp ho·∫∑c b·∫°n kh√¥ng d·∫°y l·ªõp n√†y!" });
        }
        res.json({ message: "H·ªßy ƒëƒÉng k√Ω d·∫°y th√†nh c√¥ng!" });
    });
});

router.post("/classes/:classId/assign-teacher", (req, res) => {
    const { teacher_id } = req.body;
    const classId = parseInt(req.params.classId, 10);

    if (!teacher_id || isNaN(classId)) {
        return res.status(400).json({ error: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá!" });
    }

    // 1. L·∫•y l·ªãch h·ªçc c·ªßa l·ªõp m·ªõi
    const queryNewClassSchedule = `
        SELECT pt.date_of_week, pt.start_at, pt.end_at
        FROM period_time_class ptc
        JOIN period_time pt ON pt.id = ptc.period_time_id
        WHERE ptc.class_id = ?
    `;

    // 2. L·∫•y l·ªãch h·ªçc c·ªßa c√°c l·ªõp m√† gi√°o vi√™n ƒëang d·∫°y
    const queryTeacherSchedule = `
        SELECT pt.date_of_week, pt.start_at, pt.end_at
        FROM class c
        JOIN period_time_class ptc ON c.id = ptc.class_id
        JOIN period_time pt ON pt.id = ptc.period_time_id
        WHERE c.teacher_id = ?
    `;

    db.query(queryNewClassSchedule, [classId], (err, newClassTimes) => {
        if (err) {
            console.error("‚ùå L·ªói khi l·∫•y l·ªãch l·ªõp m·ªõi:", err);
            return res.status(500).json({ error: "L·ªói khi l·∫•y l·ªãch l·ªõp m·ªõi!" });
        }

        db.query(queryTeacherSchedule, [teacher_id], (err, teacherTimes) => {
            if (err) {
                console.error("‚ùå L·ªói khi l·∫•y l·ªãch gi√°o vi√™n:", err);
                return res.status(500).json({ error: "L·ªói khi l·∫•y l·ªãch gi√°o vi√™n!" });
            }

            // 3. Ki·ªÉm tra tr√πng l·ªãch
            const isConflict = newClassTimes.some(newTime => {
                return teacherTimes.some(teacherTime => {
                    return (
                        newTime.date_of_week === teacherTime.date_of_week &&
                        !(
                            newTime.end_at <= teacherTime.start_at ||
                            newTime.start_at >= teacherTime.end_at
                        )
                    );
                });
            });

            if (isConflict) {
                return res.status(400).json({ error: "Gi√°o vi√™n ƒë√£ c√≥ l·ªõp tr√πng l·ªãch!" });
            }

            // 4. Kh√¥ng tr√πng th√¨ g√°n gi√°o vi√™n
            const sql = `UPDATE class SET teacher_id = ? WHERE id = ? AND teacher_id IS NULL`;
            db.query(sql, [teacher_id, classId], (err, result) => {
                if (err) {
                    console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t gi√°o vi√™n:", err);
                    return res.status(500).json({ error: "L·ªói khi c·∫≠p nh·∫≠t gi√°o vi√™n!" });
                }
                if (result.affectedRows === 0) {
                    return res.status(400).json({ error: "L·ªõp n√†y ƒë√£ c√≥ gi√°o vi√™n ho·∫∑c kh√¥ng t·ªìn t·∫°i!" });
                }
                res.json({ message: "‚úÖ G√°n gi√°o vi√™n th√†nh c√¥ng!" });
            });
        });
    });
});


router.get("/classes/unassigned", (req, res) => {
    const sql = `
    SELECT 
        c.id, 
        c.name, 
        CASE 
            WHEN c.type = 'NORMAL' THEN 'L·ªõp c∆° b·∫£n'
            WHEN c.type = 'Normal' THEN 'L·ªõp c∆° b·∫£n 1'
            WHEN c.type = 'Math' THEN 'L·ªõp √¥n thi v√†o 10, thi ƒë·∫°i h·ªçc'
            WHEN c.type = 'VIP' THEN 'L·ªõp √¥n thi h·ªçc sinh gi·ªèi'
            WHEN c.type = 'Advanced' THEN 'L·ªõp n√¢ng cao'
            ELSE 'Kh√°c'
        END AS type_mapped, 
        CASE 
            WHEN c.grade = 1 THEN 10
            WHEN c.grade = 2 THEN 11
            WHEN c.grade = 3 THEN 12
            ELSE c.grade
        END AS grade,
        c.max_student,
        (SELECT COUNT(*) FROM registrations WHERE class_id = c.id) AS current_student,
        GROUP_CONCAT(
            DISTINCT CONCAT(pt.date_of_week, ' (', pt.start_at, ' - ', pt.end_at, ')') 
            ORDER BY FIELD(pt.date_of_week, 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')
            SEPARATOR ', '
        ) AS schedule
    FROM class c
    LEFT JOIN period_time_class ptc ON c.id = ptc.class_id
    LEFT JOIN period_time pt ON ptc.period_time_id = pt.id
    WHERE c.teacher_id IS NULL
    GROUP BY c.id;`;

    db.query(sql, (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói khi l·∫•y danh s√°ch l·ªõp:", err);
            return res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch l·ªõp!" });
        }
        if (results.length === 0) {
            return res.status(404).json({ message: "Kh√¥ng c√≥ l·ªõp n√†o c·∫ßn gi√°o vi√™n." });
        }
        res.json(results);
    });
});
router.get("/teacher/classes/:teacher_id", (req, res) => {
    const teacherId = parseInt(req.params.teacher_id, 10);

    if (isNaN(teacherId)) {
        return res.status(400).json({ error: "ID gi√°o vi√™n kh√¥ng h·ª£p l·ªá!" });
    }

    const sql = `SELECT 
        c.id, 
        c.name, 
        CASE 
            WHEN c.type = 'NORMAL' THEN 'L·ªõp c∆° b·∫£n'
            WHEN c.type = 'Normal' THEN 'L·ªõp c∆° b·∫£n 1'
            WHEN c.type = 'Math' THEN 'L·ªõp √¥n thi v√†o 10, thi ƒë·∫°i h·ªçc'
            WHEN c.type = 'VIP' THEN 'L·ªõp √¥n thi h·ªçc sinh gi·ªèi'
            WHEN c.type = 'Advanced' THEN 'L·ªõp n√¢ng cao'
            ELSE 'Kh√°c'
        END AS type_mapped, 
        CASE 
            WHEN c.grade = 1 THEN 10
            WHEN c.grade = 2 THEN 11
            WHEN c.grade = 3 THEN 12
            ELSE c.grade
        END AS grade,
        c.max_student,
        (SELECT COUNT(*) FROM registrations WHERE class_id = c.id) AS current_student,
        GROUP_CONCAT(
            DISTINCT CONCAT(pt.date_of_week, ' (', pt.start_at, ' - ', pt.end_at, ')') 
            ORDER BY FIELD(pt.date_of_week, 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')
            SEPARATOR ', '
        ) AS schedule
    FROM class c
    LEFT JOIN period_time_class ptc ON c.id = ptc.class_id
    LEFT JOIN period_time pt ON ptc.period_time_id = pt.id
    WHERE c.teacher_id = ?  -- üî• Ch·ªâ l·∫•y l·ªãch c·ªßa gi√°o vi√™n hi·ªán t·∫°i
    GROUP BY c.id;`;

    db.query(sql, [teacherId], (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói khi l·∫•y danh s√°ch l·ªõp:", err);
            return res.status(500).json({ error: "L·ªói khi l·∫•y danh s√°ch l·ªõp!" });
        }
        if (results.length === 0) {
            console.log("üìå Gi√°o vi√™n ch∆∞a ƒëƒÉng k√Ω l·ªõp n√†o.");
            return res.json([]); // üî• ƒê·ªïi t·ª´ 404 th√†nh tr·∫£ v·ªÅ []
        }
        res.json(results);
    });
});

router.post("/manager/classes/:id/periods", async (req, res) => {
    try {
        const { periods } = req.body;
        const classId = req.params.id;

        for (let periodId of periods) {
            await db.query("INSERT INTO period_time_class (period_time_id, class_id) VALUES (?, ?)", [periodId, classId]);
        }

        res.json({ message: "ƒê√£ c·∫≠p nh·∫≠t l·ªãch h·ªçc!" });
    } catch (err) {
        res.status(500).json({ error: "L·ªói c·∫≠p nh·∫≠t l·ªãch h·ªçc!" });
    }
});
// API: L·∫•y l·ªãch d·∫°y c·ªßa gi√°o vi√™n
router.get("/schedule/:teacher_id", (req, res) => {
    const teacherId = req.params.teacher_id; // L·∫•y teacher_id t·ª´ URL

    // C√¢u l·ªánh SQL ƒë·ªÉ l·∫•y l·ªãch d·∫°y c·ªßa gi√°o vi√™n
    const sql = `
    SELECT 
        s.schedule_date, 
        sg.group_name, 
        pt.date_of_week,           -- Ng√†y trong tu·∫ßn t·ª´ b·∫£ng period_time
        pt.start_at,             -- Th·ªùi gian b·∫Øt ƒë·∫ßu t·ª´ b·∫£ng period_time
        pt.end_at,               -- Th·ªùi gian k·∫øt th√∫c t·ª´ b·∫£ng period_time
        c.name AS classroom_name,
        t.name AS teacher_name
    FROM 
        schedule s
    JOIN 
        study_groups sg ON s.group_id = sg.id
    JOIN 
        period_time pt ON s.period_time_id = pt.id
    JOIN 
        class c ON s.classroom_id = c.id
    JOIN 
        teacher t ON s.teacher_id = t.id
    WHERE 
        s.teacher_id = 1
    ORDER BY 
        s.schedule_date, pt.start_at;
`;


    db.query(sql, [teacherId], (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói khi l·∫•y l·ªãch d·∫°y:", err);
            return res.status(500).json({ error: "L·ªói khi l·∫•y l·ªãch d·∫°y!" });
        }

        // Tr·∫£ v·ªÅ l·ªãch d·∫°y
        res.json(results);
    });
});


router.post("/grades", (req, res) => {
    const { student_id, class_id, exam_name, score, exam_date } = req.body;

    if (!student_id || !class_id || !exam_name || score === undefined || !exam_date) {
        return res.status(400).json({ message: "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc!" });
    }

    // üî• Ki·ªÉm tra xem h·ªçc vi√™n c√≥ thu·ªôc l·ªõp n√†y kh√¥ng
    const checkStudentQuery = `
        SELECT * FROM registrations WHERE user_id = ? AND class_id = ?
    `;

    db.query(checkStudentQuery, [student_id, class_id], (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói ki·ªÉm tra h·ªçc vi√™n:", err);
            return res.status(500).json({ error: "L·ªói server khi ki·ªÉm tra h·ªçc vi√™n!" });
        }

        if (results.length === 0) {
            return res.status(400).json({ message: "H·ªçc vi√™n kh√¥ng thu·ªôc l·ªõp n√†y!" });
        }

        // ‚úÖ Ch·ªâ l∆∞u ƒëi·ªÉm n·∫øu h·ªçc vi√™n thu·ªôc l·ªõp
        const insertScoreQuery = `
            INSERT INTO student_scores (student_id, class_id, exam_name, score, exam_date) 
            VALUES (?, ?, ?, ?, ?)
            ON DUPLICATE KEY UPDATE score = VALUES(score), exam_date = VALUES(exam_date);
        `;

        db.query(insertScoreQuery, [student_id, class_id, exam_name, score, exam_date], (err, result) => {
            if (err) {
                console.error("‚ùå L·ªói khi nh·∫≠p ƒëi·ªÉm:", err);
                return res.status(500).json({ error: "L·ªói server khi l∆∞u ƒëi·ªÉm!" });
            }
            res.json({ message: "L∆∞u ƒëi·ªÉm th√†nh c√¥ng!" });
        });
    });
});


router.get("/class", (req, res) => {
    db.query("SELECT id, name FROM class", (err, results) => {
        if (err) return res.status(500).json({ error: "L·ªói l·∫•y danh s√°ch nh√≥m!" });
        res.json(results);
    });
});

router.get("/students", (req, res) => {
    const { class_id } = req.query;  // L·∫•y class_id t·ª´ query string

    if (!class_id) {
        return res.status(400).json({ error: "Thi·∫øu class_id" });
    }

    const sql = `
        SELECT u.id, u.fullName ,u.username
        FROM users u
        JOIN registrations r ON u.id = r.user_id
        WHERE u.role = 'hv' AND r.class_id = ?;
    `;

    db.query(sql, [class_id], (err, results) => {
        if (err) {
            console.error("‚ùå L·ªói khi l·∫•y danh s√°ch h·ªçc vi√™n:", err);
            return res.status(500).json({ error: "L·ªói l·∫•y danh s√°ch h·ªçc vi√™n!" });
        }
        res.json(results);
    });
});




// üìå API: Gi√°o vi√™n c·∫≠p nh·∫≠t ƒëi·ªÉm
router.put("/grades/:scoreId", (req, res) => {
    const scoreId = req.params.scoreId;
    const { score } = req.body;

    if (!score) {
        return res.status(400).json({ error: "Thi·∫øu ƒëi·ªÉm s·ªë!" });
    }

    const sql = `UPDATE student_scores SET score = ? WHERE id = ?`;

    db.query(sql, [score, scoreId], (err, result) => {
        if (err) {
            console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t ƒëi·ªÉm:", err);
            return res.status(500).json({ error: "L·ªói khi c·∫≠p nh·∫≠t ƒëi·ªÉm!" });
        }
        res.json({ message: "C·∫≠p nh·∫≠t ƒëi·ªÉm th√†nh c√¥ng!" });
    });
});

export default router;
